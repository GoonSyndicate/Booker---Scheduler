
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Booking Calendar</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <h1>Booking Calendar</h1>
  <table class="calendar">
    <thead>
      <tr>
        <th>Sun</th>
        <th>Mon</th>
        <th>Tue</th>
        <th>Wed</th>
        <th>Thu</th>
        <th>Fri</th>
        <th>Sat</th>
      </tr>
    </thead>
    <tbody id="calendar-body">
      <!-- Calendar will be populated here -->
    </tbody>
  </table>
  <div id="event-form" class="event-form" style="display: none;">
    <h2><span id="form-title">Add/Edit Event</span> for <span id="form-date"></span></h2>
    <input type="text" id="event-name" placeholder="Event Name">
    <input type="time" id="event-start-time" placeholder="Start Time">
    <input type="time" id="event-end-time" placeholder="End Time">
    <input type="color" id="event-color">
    <textarea id="event-description" placeholder="Description"></textarea>
    <button onclick="deleteEvent()">Delete</button>
    <button onclick="saveEvent()">Save</button>
    <button onclick="discardEvent()">Discard</button>
  </div>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="script.js"></script>
</body>
</html>
<!-- /index.html -->

<!-- styles.css -->
/* styles.css */

.event {
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
}

h1 {
  background-color: #4285f4;
  color: white;
  margin: 0;
  padding: 15px;
  text-align: center;
}

.calendar {
  width: 100%;
  margin: 20px auto;
  border-collapse: collapse;
  box-shadow: 0px 0px 20px rgba(0,0,0,0.2);
}

.calendar th {
  background-color: #f1f1f1;
  padding: 10px;
  background: linear-gradient(to bottom, #5f9dff 0%, #0dd140 100%);
}

.calendar .weekend {
  background-color: #f9f9f9;
}

.calendar td:hover {
  background-color: rgba(66, 133, 244, 0.1);
  cursor: pointer;
}

.calendar td.active {
  background-color: #4285f4;
  color: white;
}

.cell-wrapper {
  width: 100%;
  height: 100px;
  position:inherit;
  overflow-y: scroll;
  overflow-x:hidden;
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-direction: column;
  flex-wrap: wrap;
  align-content: stretch;
}


.day {
  position: sticky;  /* Make it sticky */
  top: 0;  /* Stick to the top */
  background: white;  /* Background to overlay content */
  z-index: 2;
}

.event {
  position:relative;  /* Changed */
  top: 10px;  /* Positioned for centering */
  font-size: 12px;
  color: white;
  border-radius: 5px;
  white-space: normal;
  max-height: 60px;  /* Changed */
  text-align: center;
  padding: 4px;
  text-overflow: clip;
  block-size: auto;
  overflow-x: clip;
  text-overflow: clip;
}

.calendar td {
  border: 1px solid #ccc;
  width: 75px;
  max-width: 75px;
  height: 100px;  /* This height will be the default size of the day cell */
  position: relative;
}

.event:hover {
  outline: 2px solid #4285f4;
}

<!-- /styles.css -->

<!-- script.js -->
// script.js
let events = {};
const today = new Date();
const currentYear = today.getFullYear();
const currentMonth = today.getMonth();

const fetchEvents = () => {
  console.log("Fetching events from server...");
  $.get("http://localhost:5000/get_events", function (response) {
    console.log("Events fetched from server: ", response);
    events = {}; // Clear existing events
    response.forEach(([id, day, name, startTime, endTime, description, color]) => {
      if (!events[day]) events[day] = [];
      events[day].push({ id, name, startTime, endTime, description, color });
    });
    generateCalendar();
  });
};

const saveEvent = () => {
  const form = document.getElementById("event-form");
  const data = {
    day: form.dataset.day,
    name: document.getElementById("event-name").value.trim(),
    startTime: document.getElementById("event-start-time").value,
    endTime: document.getElementById("event-end-time").value,
    description: document.getElementById("event-description").value.trim(),
    color: document.getElementById("event-color").value
  };

  if (form.dataset.id && form.dataset.id !== "null") {
    data.id = form.dataset.id;
  } else {
    data.id = null;
  }
  


  // Field Validation
  if (!data.name || !data.startTime || !data.endTime || !data.description || !data.color) {
      alert("All fields are required");
      return;
  }

  // Time Bounds Check
  if (data.startTime > "23:59" || data.endTime > "23:59" || data.startTime < "00:00" || data.endTime < "00:00") {
      alert("Invalid time");
      return;
  }

  console.log("Data being sent to server: ", data);

  const url = data.id ? "http://localhost:5000/update_event" : "http://localhost:5000/add_event";
  const method = data.id ? "PUT" : "POST";

  $.ajax({
    url,
    type: method,
    data: JSON.stringify(data),
    contentType: "application/json; charset=utf-8",
    success: function(response) {
      console.log("Server response: ", response);
      fetchEvents();
    },
    complete: discardEvent
  });
};


const deleteEvent = () => {
  const id = document.getElementById("event-form").dataset.id;
  if (!id) return;
  $.ajax({
    url: "http://localhost:5000/delete_event",
    type: "DELETE",
    data: JSON.stringify({ id }),
    contentType: "application/json; charset=utf-8",
    success: fetchEvents,
    complete: discardEvent
  });
};

const editEvent = (day, index) => {
  const event = events[day][index];
  const form = document.getElementById("event-form");
  form.dataset.id = event.id;
  console.log("Setting form.dataset.id to ", event.id);
  form.dataset.day = day;
  form.dataset.index = index;
  document.getElementById("event-name").value = event.name;
  document.getElementById("event-start-time").value = event.startTime;
  document.getElementById("event-end-time").value = event.endTime;
  document.getElementById("event-color").value = event.color;
  document.getElementById("event-description").value = event.description;
  document.getElementById("form-title").textContent = "Edit Event";
  form.style.display = "block";
};

const discardEvent = () => {
  const form = document.getElementById("event-form");
  form.dataset.id = null;
  form.dataset.day = null;
  form.dataset.index = null;
  form.style.display = "none";
};

const selectDate = (day) => {
  const form = document.getElementById("event-form");
  form.dataset.id = null;
  form.dataset.day = day;
  form.dataset.index = null;
  document.getElementById("form-title").textContent = "Add Event";
  form.style.display = "block";
};

const generateCalendar = (year = currentYear, month = currentMonth) => {
  const tbody = document.getElementById("calendar-body");
  tbody.innerHTML = "";

  const firstDay = new Date(year, month, 1).getDay();
  const daysInMonth = new Date(year, month + 1, 0).getDate();

  for (let i = 0; i < 5; i++) {
    const row = document.createElement("tr");

    for (let j = 0; j < 7; j++) {
      const cell = document.createElement("td");
      const cellWrapper = document.createElement("div");
      cellWrapper.className = "cell-wrapper";

      const currentDay = new Date(year, month, i * 7 + j - firstDay + 1).getDate();

      if ((i === 0 && j < firstDay) || currentDay > daysInMonth) {
        cellWrapper.innerHTML = "";
      } else {
        const dayDiv = document.createElement("div");
        dayDiv.className = "day";
        dayDiv.innerHTML = currentDay;

        cellWrapper.onclick = () => selectDate(currentDay);

        cell.appendChild(dayDiv);

        if (events[currentDay]) {
          events[currentDay].forEach((event, index) => {
            const eventDiv = document.createElement("div");
            eventDiv.className = "event";
            eventDiv.style.backgroundColor = event.color;
            eventDiv.innerHTML = `${event.name} <span>${event.startTime} - ${event.endTime}</span>`;
            eventDiv.title = event.description;

            eventDiv.onclick = (e) => {
              e.stopPropagation();
              editEvent(currentDay, index);
            };

            cellWrapper.appendChild(eventDiv);
          });
        }
      }

      if (j === 0 || j === 6) {
        cell.classList.add("weekend");
      }

      cell.appendChild(cellWrapper);
      row.appendChild(cell);
    }

    tbody.appendChild(row);
  }

  document.querySelector("h1").textContent = `Booking Calendar for ${new Date(year, month).toLocaleString('default', { month: 'long' })} ${year}`;
};


$(document).ready(() => {
  fetchEvents();
  generateCalendar();
});

<!-- /script.js -->

<!-- eventdb.py -->
from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3

app = Flask(__name__)
CORS(app)


@app.route('/get_events', methods=['GET'])
def get_events():
    conn = sqlite3.connect('events.db')
    c = conn.cursor()
    c.execute("SELECT * FROM events")
    events = c.fetchall()
    conn.close()
    return jsonify(events)

@app.route('/add_event', methods=['POST'])
def add_event():
    conn = sqlite3.connect('events.db')
    c = conn.cursor()
    data = request.json
    try:
        c.execute("INSERT INTO events (day, name, startTime, endTime, description, color) VALUES (?, ?, ?, ?, ?, ?)",
                  (data['day'], data['name'], data['startTime'], data['endTime'], data['description'], data['color']))
        conn.commit()
        print("Data inserted successfully")
        return jsonify({"status": "success"})
    except sqlite3.Error as e:
        print("SQL error:", e)
        conn.rollback()
        return jsonify({"status": "failed", "reason": str(e)})
    finally:
        conn.close()


@app.route('/update_event', methods=['PUT'])
def update_event():
    conn = sqlite3.connect('events.db')
    c = conn.cursor()
    data = request.json
    try:
        if data['id']:
            c.execute("UPDATE events SET day = ?, name = ?, startTime = ?, endTime = ?, description = ?, color = ? WHERE id = ?",
                      (data['day'], data['name'], data['startTime'], data['endTime'], data['description'], data['color'], data['id']))
            conn.commit()
            print("Data updated successfully")
            return jsonify({"status": "success"})
        else:
            print("No id provided for update. Ignoring.")
            return jsonify({"status": "failed", "reason": "No id provided for update"})
    except sqlite3.Error as e:
        print("SQL error:", e)
        conn.rollback()
        return jsonify({"status": "failed", "reason": str(e)})
    finally:
        conn.close()


@app.route('/delete_event', methods=['DELETE'])
def delete_event():
    conn = sqlite3.connect('events.db')
    c = conn.cursor()
    data = request.json
    try:
        c.execute("DELETE FROM events WHERE id = ?", (data['id'],))
        conn.commit()
        return jsonify({"status": "success"})
    except sqlite3.Error as e:
        print("SQL error:", e)
        conn.rollback()
        return jsonify({"status": "failed", "reason": str(e)})
    finally:
        conn.close()
    
if __name__ == '__main__':
    conn = sqlite3.connect('events.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS events
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  day INTEGER, name TEXT, startTime TEXT, 
                  endTime TEXT, description TEXT, color TEXT)''')
    conn.commit()
    conn.close()
    app.run(debug=True)
<!-- /eventdb.py -->
